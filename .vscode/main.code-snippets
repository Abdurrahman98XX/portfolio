{
	// Place your portfolio workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	"json": {
		"scope": "dart",
		"prefix": "json",
		"body": [
			"import 'package:json_annotation/json_annotation.dart';",
			"import 'package:portfolio/src/common/json_conversion.dart';",
			"import 'package:portfolio/src/feature/base_entity/base_entity.dart';",
			"part '${TM_FILENAME_BASE}.g.dart';",
			"@jsonC",
			"class ${1:Name}Entity extends BaseEntity {",
			"  const ${1:Name}Entity({",
			"    required this.${2:Prop},",
			"    required super.name,",
			"    required super.id,",
			"    required super.vId,",
			"    required super.type,",
			"    required super.createdAt,",
			"    required super.modifiedAt,",
			"  });",
			"  final $0 ${2:Prop};",
			"  @override",
			"  List get equality => [${2:Prop}];",
			"  factory ${1:Name}Entity.fromJson(Map<String, dynamic> json) => _$${1:Name}EntityFromJson(json);",
			"  @override",
			"  Map<String, dynamic> toJson() => _$${1:Name}EntityToJson(this);",
			"}",
			"",
		],
		"description": "json data class"
	}
}